# -*- coding: utf-8 -*-
"""steganography

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/ashishdev007/steganography/blob/main/steganography.ipynb
"""

import time
from PIL import Image
from PIL import ImageColor
import numpy as np
import binascii
import optparse

def rgb2hex(r,g,b):
  return '#{:02x}{:02x}{:02x}'.format(r,g,b)

def hex2rgb(hexcode):
  # return ImageColor.getcolor(hexcode, "RGB")
  hexcode = hexcode[1:]
  return tuple(map(lambda x : int(hexcode[x:x+2], 16), (0,2,4)))

def str2bin(message):
  binary = bin(int(binascii.hexlify(message), 16))
  return binary[2:]

def bin2str(binary):
  message = binascii.unhexlify("%x" % (int('0b' + binary, 2)))
  try:
    message =  message.decode("utf8")
  except UnicodeDecodeError:
    message = message.decode("ascii")
  except:
    print("Bit Array decode error!")
  finally:
    return str(message)
  

def encode(hexcode, digit):
  if(hexcode[-1] in ("0", "1", "2", "3", "4", "5")):
    hexcode = hexcode[:-1] + digit
    return hexcode
  else:
    return None

def enhanced_encode(hexcode, digit):
  hexcode = list(hexcode[1:])
  # hexTargets = (hexcode[1], hexcode[3], hexcode[5])
  consumed = 0;

  for i in range(3):
    num = 2*i + 1
    if(hexcode[num] in ("0", "1", "2", "3", "4", "5")):
      try:
        hexcode[num] =  digit[consumed]
      except IndexError:
        break
      
      consumed += 1;
  hexcode = "#" + "".join(hexcode)
  return hexcode, consumed


def decode(hexcode):
  if (hexcode[-1] in ("0", "1")):
    return hexcode[-1]
  else:
    return None
    
def enhanced_decode(hexcode):
  digit = ""
  hexcode = list(hexcode[1:])
  hexTargets = (hexcode[1], hexcode[3], hexcode[5])

  for i in range(3):
    if (hexTargets[i] in ("0", "1")):
      digit += hexTargets[i]

  return digit


def hide(filename, message):
  img = Image.open(filename)
  binary = str2bin(message) + "1"*15 + "0"
  if img.mode in "RGBA":
    img = img.convert("RGBA")
    datas = img.getdata()
    
    newData = []
    digit = 0
    temp = ""
    for item  in datas:
      if (digit < len(binary)):
        newpix = encode(rgb2hex(item[0], item[1], item[2]), binary[digit])

        if newpix == None:
          newData.append(item)

        else:
          r,g,b = hex2rgb(newpix)
          newData.append((r,g,b, item[3]))
          digit += 1
      else:
        newData.append(item)

    img.putdata(newData)
    filename = "{}.png".format(filename.split(".")[0])
    img.save(filename, "PNG")
    return "Completed!"
  
  return "Incorrect Image mode, couldn't hide"

def enhanced_hide(filename, message):
  img = Image.open(filename)
  start = time.time()

  binary = str(str2bin(message) + "1"*15 + "0")
  end = time.time()
  print("Binary Conversion Time = ", end - start)

  if img.mode in "RGBA":
    img = img.convert("RGBA")
    datas = img.getdata()
    
    newData = []
    digit = 0

    start = time.time()

    for item  in datas:
      
      if (digit < len(binary)):
        (newpix, consumed) = enhanced_encode(rgb2hex(item[0], item[1], item[2]), binary[digit: digit+3])

        if newpix == None:
          newData.append(item)

        else:
          r,g,b = hex2rgb(newpix)
          newData.append((r,g,b, item[3]))

          digit += consumed
      else:
        newData.append(item)

    end = time.time()
    print("Single Loop Time = ", end - start)


    img.putdata(newData)
    filename = "{}2.png".format(filename.split(".")[0])
    img.save(filename, "PNG")
    return "Completed!"
  
  return "Incorrect Image mode, couldn't hide"

def retr(filename):
  img = Image.open(filename)

  binary = ""

  if img.mode in "RGBA":
    img = img.convert("RGBA")
    datas = img.getdata()

    for item in datas:
      digit = decode(rgb2hex(item[0], item[1], item[2]))
      if digit == None:
        pass
      else:
        binary += digit
        if (binary[-16:] == "1111111111111110"):
          print("Success!")
          return bin2str(binary[:-16])

    return bin2str(binary)
  return "Incorrect Image mode, couldn't retrivev"
  
def enhanced_retr(filename):
  img = Image.open(filename)

  binary = ""
  file = open("answer.txt", "w")
  file.write("")
  file.close()

  if img.mode in "RGBA":
    img = img.convert("RGBA")
    datas = img.getdata()

    with open("answer.txt", "a") as file:
      for item in datas:
        digit = enhanced_decode(rgb2hex(item[0], item[1], item[2]))
        
        
        if digit == None:
          pass
        else:
          binary += digit
          if(len(binary) >= 1000):
            file.write(binary[:-20])
            binary=binary[-20:]

          if ("1111111111111110" in binary):
            print("Success!")
            index = binary.index("1111111111111110")
            binary = binary[:index]
            break

      file.write(binary)

    with open("answer.txt", "r") as rFile:
      with open("decoded.txt", "w") as wFile:
        wFile.write(bin2str(rFile.read()))
    return "Success!"
  return "Incorrect Image mode, couldn't retrive"

def Main():
  parser = optparse.OptionParser("usage %prog -e/-d <target_image>")
  parser.add_option("-e", dest="hide", type="string" ,\
                    help="Hide text in an image")
  parser.add_option("-d", dest="retr", type="string" ,\
                    help="Retrieve hidden text from an image")
  
  (options, args) = parser.parse_args()
  if (options.hide != None):
    text = input("Enter a message to hide: ")
    print (enhanced_hide(options.hide, text.encode()))

  elif (options.retr != None):
    print(enhanced_retr(options.retr))

  else:
    print (parser.usage)
    exit(0)

if __name__ == "__main__":
  Main()

# enhanced_hide("image.jpeg", "hello".encode())